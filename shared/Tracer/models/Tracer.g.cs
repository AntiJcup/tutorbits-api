// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Tracer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tracer {

  /// <summary>Holder for reflection information generated from Tracer.proto</summary>
  public static partial class TracerReflection {

    #region Descriptor
    /// <summary>File descriptor for Tracer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TracerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxUcmFjZXIucHJvdG8SD2dvb2dsZS5wcm90b2J1ZiIjCg5DcmVhdGVGaWxl",
            "RGF0YRIRCglmaWxlX3BhdGgYASABKAkiIwoORGVsZXRlRmlsZURhdGESEQoJ",
            "ZmlsZV9wYXRoGAEgASgJIk8KDkluc2VydEZpbGVEYXRhEhEKCWZpbGVfcGF0",
            "aBgBIAEoCRIMCgRsaW5lGAIgASgNEg4KBm9mZnNldBgDIAEoDRIMCgRkYXRh",
            "GAQgASgJIloKDUVyYXNlRmlsZURhdGESEQoJZmlsZV9wYXRoGAEgASgJEgwK",
            "BGxpbmUYAiABKA0SFAoMb2Zmc2V0X3N0YXJ0GAMgASgNEhIKCm9mZnNldF9l",
            "bmQYBCABKA0irQMKEFRyYWNlVHJhbnNhY3Rpb24SRAoEdHlwZRgBIAEoDjI2",
            "Lmdvb2dsZS5wcm90b2J1Zi5UcmFjZVRyYW5zYWN0aW9uLlRyYWNlVHJhbnNh",
            "Y3Rpb25UeXBlEhYKDnRpbWVfb2Zmc2V0X21zGAIgASgNEjYKC2NyZWF0ZV9m",
            "aWxlGAMgASgLMh8uZ29vZ2xlLnByb3RvYnVmLkNyZWF0ZUZpbGVEYXRhSAAS",
            "NgoLZGVsZXRlX2ZpbGUYBCABKAsyHy5nb29nbGUucHJvdG9idWYuRGVsZXRl",
            "RmlsZURhdGFIABI2CgtpbnNlcnRfZmlsZRgFIAEoCzIfLmdvb2dsZS5wcm90",
            "b2J1Zi5JbnNlcnRGaWxlRGF0YUgAEjQKCmVyYXNlX2ZpbGUYBiABKAsyHi5n",
            "b29nbGUucHJvdG9idWYuRXJhc2VGaWxlRGF0YUgAIlUKFFRyYWNlVHJhbnNh",
            "Y3Rpb25UeXBlEg4KCkNyZWF0ZUZpbGUQABIOCgpEZWxldGVGaWxlEAESDgoK",
            "SW5zZXJ0RmlsZRACEg0KCUVyYXNlRmlsZRADQgYKBGRhdGEiYQoTVHJhY2VU",
            "cmFuc2FjdGlvbkxvZxIRCglwYXJ0aXRpb24YASABKA0SNwoMdHJhbnNhY3Rp",
            "b25zGAIgAygLMiEuZ29vZ2xlLnByb3RvYnVmLlRyYWNlVHJhbnNhY3Rpb24i",
            "RAoMVHJhY2VQcm9qZWN0EgoKAmlkGAEgASgJEhAKCGR1cmF0aW9uGAIgASgN",
            "EhYKDnBhcnRpdGlvbl9zaXplGAMgASgNQgmqAgZUcmFjZXJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.CreateFileData), global::Tracer.CreateFileData.Parser, new[]{ "FilePath" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.DeleteFileData), global::Tracer.DeleteFileData.Parser, new[]{ "FilePath" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.InsertFileData), global::Tracer.InsertFileData.Parser, new[]{ "FilePath", "Line", "Offset", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.EraseFileData), global::Tracer.EraseFileData.Parser, new[]{ "FilePath", "Line", "OffsetStart", "OffsetEnd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.TraceTransaction), global::Tracer.TraceTransaction.Parser, new[]{ "Type", "TimeOffsetMs", "CreateFile", "DeleteFile", "InsertFile", "EraseFile" }, new[]{ "Data" }, new[]{ typeof(global::Tracer.TraceTransaction.Types.TraceTransactionType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.TraceTransactionLog), global::Tracer.TraceTransactionLog.Parser, new[]{ "Partition", "Transactions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.TraceProject), global::Tracer.TraceProject.Parser, new[]{ "Id", "Duration", "PartitionSize" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///Data
  /// </summary>
  public sealed partial class CreateFileData : pb::IMessage<CreateFileData> {
    private static readonly pb::MessageParser<CreateFileData> _parser = new pb::MessageParser<CreateFileData>(() => new CreateFileData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateFileData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFileData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFileData(CreateFileData other) : this() {
      filePath_ = other.filePath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFileData Clone() {
      return new CreateFileData(this);
    }

    /// <summary>Field number for the "file_path" field.</summary>
    public const int FilePathFieldNumber = 1;
    private string filePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FilePath {
      get { return filePath_; }
      set {
        filePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateFileData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateFileData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FilePath != other.FilePath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FilePath.Length != 0) hash ^= FilePath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FilePath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FilePath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilePath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateFileData other) {
      if (other == null) {
        return;
      }
      if (other.FilePath.Length != 0) {
        FilePath = other.FilePath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FilePath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteFileData : pb::IMessage<DeleteFileData> {
    private static readonly pb::MessageParser<DeleteFileData> _parser = new pb::MessageParser<DeleteFileData>(() => new DeleteFileData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteFileData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteFileData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteFileData(DeleteFileData other) : this() {
      filePath_ = other.filePath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteFileData Clone() {
      return new DeleteFileData(this);
    }

    /// <summary>Field number for the "file_path" field.</summary>
    public const int FilePathFieldNumber = 1;
    private string filePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FilePath {
      get { return filePath_; }
      set {
        filePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteFileData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteFileData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FilePath != other.FilePath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FilePath.Length != 0) hash ^= FilePath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FilePath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FilePath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilePath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteFileData other) {
      if (other == null) {
        return;
      }
      if (other.FilePath.Length != 0) {
        FilePath = other.FilePath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FilePath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InsertFileData : pb::IMessage<InsertFileData> {
    private static readonly pb::MessageParser<InsertFileData> _parser = new pb::MessageParser<InsertFileData>(() => new InsertFileData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsertFileData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertFileData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertFileData(InsertFileData other) : this() {
      filePath_ = other.filePath_;
      line_ = other.line_;
      offset_ = other.offset_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InsertFileData Clone() {
      return new InsertFileData(this);
    }

    /// <summary>Field number for the "file_path" field.</summary>
    public const int FilePathFieldNumber = 1;
    private string filePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FilePath {
      get { return filePath_; }
      set {
        filePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 2;
    private uint line_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 3;
    private uint offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InsertFileData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InsertFileData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FilePath != other.FilePath) return false;
      if (Line != other.Line) return false;
      if (Offset != other.Offset) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FilePath.Length != 0) hash ^= FilePath.GetHashCode();
      if (Line != 0) hash ^= Line.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FilePath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FilePath);
      }
      if (Line != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Line);
      }
      if (Offset != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Offset);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilePath);
      }
      if (Line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Line);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Offset);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InsertFileData other) {
      if (other == null) {
        return;
      }
      if (other.FilePath.Length != 0) {
        FilePath = other.FilePath;
      }
      if (other.Line != 0) {
        Line = other.Line;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FilePath = input.ReadString();
            break;
          }
          case 16: {
            Line = input.ReadUInt32();
            break;
          }
          case 24: {
            Offset = input.ReadUInt32();
            break;
          }
          case 34: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EraseFileData : pb::IMessage<EraseFileData> {
    private static readonly pb::MessageParser<EraseFileData> _parser = new pb::MessageParser<EraseFileData>(() => new EraseFileData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EraseFileData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EraseFileData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EraseFileData(EraseFileData other) : this() {
      filePath_ = other.filePath_;
      line_ = other.line_;
      offsetStart_ = other.offsetStart_;
      offsetEnd_ = other.offsetEnd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EraseFileData Clone() {
      return new EraseFileData(this);
    }

    /// <summary>Field number for the "file_path" field.</summary>
    public const int FilePathFieldNumber = 1;
    private string filePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FilePath {
      get { return filePath_; }
      set {
        filePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 2;
    private uint line_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    /// <summary>Field number for the "offset_start" field.</summary>
    public const int OffsetStartFieldNumber = 3;
    private uint offsetStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetStart {
      get { return offsetStart_; }
      set {
        offsetStart_ = value;
      }
    }

    /// <summary>Field number for the "offset_end" field.</summary>
    public const int OffsetEndFieldNumber = 4;
    private uint offsetEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetEnd {
      get { return offsetEnd_; }
      set {
        offsetEnd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EraseFileData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EraseFileData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FilePath != other.FilePath) return false;
      if (Line != other.Line) return false;
      if (OffsetStart != other.OffsetStart) return false;
      if (OffsetEnd != other.OffsetEnd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FilePath.Length != 0) hash ^= FilePath.GetHashCode();
      if (Line != 0) hash ^= Line.GetHashCode();
      if (OffsetStart != 0) hash ^= OffsetStart.GetHashCode();
      if (OffsetEnd != 0) hash ^= OffsetEnd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FilePath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FilePath);
      }
      if (Line != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Line);
      }
      if (OffsetStart != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OffsetStart);
      }
      if (OffsetEnd != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OffsetEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilePath);
      }
      if (Line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Line);
      }
      if (OffsetStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetStart);
      }
      if (OffsetEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetEnd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EraseFileData other) {
      if (other == null) {
        return;
      }
      if (other.FilePath.Length != 0) {
        FilePath = other.FilePath;
      }
      if (other.Line != 0) {
        Line = other.Line;
      }
      if (other.OffsetStart != 0) {
        OffsetStart = other.OffsetStart;
      }
      if (other.OffsetEnd != 0) {
        OffsetEnd = other.OffsetEnd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FilePath = input.ReadString();
            break;
          }
          case 16: {
            Line = input.ReadUInt32();
            break;
          }
          case 24: {
            OffsetStart = input.ReadUInt32();
            break;
          }
          case 32: {
            OffsetEnd = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TraceTransaction : pb::IMessage<TraceTransaction> {
    private static readonly pb::MessageParser<TraceTransaction> _parser = new pb::MessageParser<TraceTransaction>(() => new TraceTransaction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceTransaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransaction(TraceTransaction other) : this() {
      type_ = other.type_;
      timeOffsetMs_ = other.timeOffsetMs_;
      switch (other.DataCase) {
        case DataOneofCase.CreateFile:
          CreateFile = other.CreateFile.Clone();
          break;
        case DataOneofCase.DeleteFile:
          DeleteFile = other.DeleteFile.Clone();
          break;
        case DataOneofCase.InsertFile:
          InsertFile = other.InsertFile.Clone();
          break;
        case DataOneofCase.EraseFile:
          EraseFile = other.EraseFile.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransaction Clone() {
      return new TraceTransaction(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Tracer.TraceTransaction.Types.TraceTransactionType type_ = global::Tracer.TraceTransaction.Types.TraceTransactionType.CreateFile;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tracer.TraceTransaction.Types.TraceTransactionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "time_offset_ms" field.</summary>
    public const int TimeOffsetMsFieldNumber = 2;
    private uint timeOffsetMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeOffsetMs {
      get { return timeOffsetMs_; }
      set {
        timeOffsetMs_ = value;
      }
    }

    /// <summary>Field number for the "create_file" field.</summary>
    public const int CreateFileFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tracer.CreateFileData CreateFile {
      get { return dataCase_ == DataOneofCase.CreateFile ? (global::Tracer.CreateFileData) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.CreateFile;
      }
    }

    /// <summary>Field number for the "delete_file" field.</summary>
    public const int DeleteFileFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tracer.DeleteFileData DeleteFile {
      get { return dataCase_ == DataOneofCase.DeleteFile ? (global::Tracer.DeleteFileData) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.DeleteFile;
      }
    }

    /// <summary>Field number for the "insert_file" field.</summary>
    public const int InsertFileFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tracer.InsertFileData InsertFile {
      get { return dataCase_ == DataOneofCase.InsertFile ? (global::Tracer.InsertFileData) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.InsertFile;
      }
    }

    /// <summary>Field number for the "erase_file" field.</summary>
    public const int EraseFileFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tracer.EraseFileData EraseFile {
      get { return dataCase_ == DataOneofCase.EraseFile ? (global::Tracer.EraseFileData) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.EraseFile;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      CreateFile = 3,
      DeleteFile = 4,
      InsertFile = 5,
      EraseFile = 6,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceTransaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceTransaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (TimeOffsetMs != other.TimeOffsetMs) return false;
      if (!object.Equals(CreateFile, other.CreateFile)) return false;
      if (!object.Equals(DeleteFile, other.DeleteFile)) return false;
      if (!object.Equals(InsertFile, other.InsertFile)) return false;
      if (!object.Equals(EraseFile, other.EraseFile)) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Tracer.TraceTransaction.Types.TraceTransactionType.CreateFile) hash ^= Type.GetHashCode();
      if (TimeOffsetMs != 0) hash ^= TimeOffsetMs.GetHashCode();
      if (dataCase_ == DataOneofCase.CreateFile) hash ^= CreateFile.GetHashCode();
      if (dataCase_ == DataOneofCase.DeleteFile) hash ^= DeleteFile.GetHashCode();
      if (dataCase_ == DataOneofCase.InsertFile) hash ^= InsertFile.GetHashCode();
      if (dataCase_ == DataOneofCase.EraseFile) hash ^= EraseFile.GetHashCode();
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Tracer.TraceTransaction.Types.TraceTransactionType.CreateFile) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (TimeOffsetMs != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TimeOffsetMs);
      }
      if (dataCase_ == DataOneofCase.CreateFile) {
        output.WriteRawTag(26);
        output.WriteMessage(CreateFile);
      }
      if (dataCase_ == DataOneofCase.DeleteFile) {
        output.WriteRawTag(34);
        output.WriteMessage(DeleteFile);
      }
      if (dataCase_ == DataOneofCase.InsertFile) {
        output.WriteRawTag(42);
        output.WriteMessage(InsertFile);
      }
      if (dataCase_ == DataOneofCase.EraseFile) {
        output.WriteRawTag(50);
        output.WriteMessage(EraseFile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Tracer.TraceTransaction.Types.TraceTransactionType.CreateFile) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (TimeOffsetMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeOffsetMs);
      }
      if (dataCase_ == DataOneofCase.CreateFile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateFile);
      }
      if (dataCase_ == DataOneofCase.DeleteFile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteFile);
      }
      if (dataCase_ == DataOneofCase.InsertFile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InsertFile);
      }
      if (dataCase_ == DataOneofCase.EraseFile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EraseFile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceTransaction other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Tracer.TraceTransaction.Types.TraceTransactionType.CreateFile) {
        Type = other.Type;
      }
      if (other.TimeOffsetMs != 0) {
        TimeOffsetMs = other.TimeOffsetMs;
      }
      switch (other.DataCase) {
        case DataOneofCase.CreateFile:
          if (CreateFile == null) {
            CreateFile = new global::Tracer.CreateFileData();
          }
          CreateFile.MergeFrom(other.CreateFile);
          break;
        case DataOneofCase.DeleteFile:
          if (DeleteFile == null) {
            DeleteFile = new global::Tracer.DeleteFileData();
          }
          DeleteFile.MergeFrom(other.DeleteFile);
          break;
        case DataOneofCase.InsertFile:
          if (InsertFile == null) {
            InsertFile = new global::Tracer.InsertFileData();
          }
          InsertFile.MergeFrom(other.InsertFile);
          break;
        case DataOneofCase.EraseFile:
          if (EraseFile == null) {
            EraseFile = new global::Tracer.EraseFileData();
          }
          EraseFile.MergeFrom(other.EraseFile);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Tracer.TraceTransaction.Types.TraceTransactionType) input.ReadEnum();
            break;
          }
          case 16: {
            TimeOffsetMs = input.ReadUInt32();
            break;
          }
          case 26: {
            global::Tracer.CreateFileData subBuilder = new global::Tracer.CreateFileData();
            if (dataCase_ == DataOneofCase.CreateFile) {
              subBuilder.MergeFrom(CreateFile);
            }
            input.ReadMessage(subBuilder);
            CreateFile = subBuilder;
            break;
          }
          case 34: {
            global::Tracer.DeleteFileData subBuilder = new global::Tracer.DeleteFileData();
            if (dataCase_ == DataOneofCase.DeleteFile) {
              subBuilder.MergeFrom(DeleteFile);
            }
            input.ReadMessage(subBuilder);
            DeleteFile = subBuilder;
            break;
          }
          case 42: {
            global::Tracer.InsertFileData subBuilder = new global::Tracer.InsertFileData();
            if (dataCase_ == DataOneofCase.InsertFile) {
              subBuilder.MergeFrom(InsertFile);
            }
            input.ReadMessage(subBuilder);
            InsertFile = subBuilder;
            break;
          }
          case 50: {
            global::Tracer.EraseFileData subBuilder = new global::Tracer.EraseFileData();
            if (dataCase_ == DataOneofCase.EraseFile) {
              subBuilder.MergeFrom(EraseFile);
            }
            input.ReadMessage(subBuilder);
            EraseFile = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TraceTransaction message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TraceTransactionType {
        [pbr::OriginalName("CreateFile")] CreateFile = 0,
        [pbr::OriginalName("DeleteFile")] DeleteFile = 1,
        [pbr::OriginalName("InsertFile")] InsertFile = 2,
        [pbr::OriginalName("EraseFile")] EraseFile = 3,
      }

    }
    #endregion

  }

  public sealed partial class TraceTransactionLog : pb::IMessage<TraceTransactionLog> {
    private static readonly pb::MessageParser<TraceTransactionLog> _parser = new pb::MessageParser<TraceTransactionLog>(() => new TraceTransactionLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceTransactionLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransactionLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransactionLog(TraceTransactionLog other) : this() {
      partition_ = other.partition_;
      transactions_ = other.transactions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransactionLog Clone() {
      return new TraceTransactionLog(this);
    }

    /// <summary>Field number for the "partition" field.</summary>
    public const int PartitionFieldNumber = 1;
    private uint partition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Partition {
      get { return partition_; }
      set {
        partition_ = value;
      }
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tracer.TraceTransaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(18, global::Tracer.TraceTransaction.Parser);
    private readonly pbc::RepeatedField<global::Tracer.TraceTransaction> transactions_ = new pbc::RepeatedField<global::Tracer.TraceTransaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tracer.TraceTransaction> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceTransactionLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceTransactionLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Partition != other.Partition) return false;
      if(!transactions_.Equals(other.transactions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Partition != 0) hash ^= Partition.GetHashCode();
      hash ^= transactions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Partition != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Partition);
      }
      transactions_.WriteTo(output, _repeated_transactions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Partition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Partition);
      }
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceTransactionLog other) {
      if (other == null) {
        return;
      }
      if (other.Partition != 0) {
        Partition = other.Partition;
      }
      transactions_.Add(other.transactions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Partition = input.ReadUInt32();
            break;
          }
          case 18: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TraceProject : pb::IMessage<TraceProject> {
    private static readonly pb::MessageParser<TraceProject> _parser = new pb::MessageParser<TraceProject>(() => new TraceProject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceProject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceProject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceProject(TraceProject other) : this() {
      id_ = other.id_;
      duration_ = other.duration_;
      partitionSize_ = other.partitionSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceProject Clone() {
      return new TraceProject(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private uint duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "partition_size" field.</summary>
    public const int PartitionSizeFieldNumber = 3;
    private uint partitionSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartitionSize {
      get { return partitionSize_; }
      set {
        partitionSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceProject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceProject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Duration != other.Duration) return false;
      if (PartitionSize != other.PartitionSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (PartitionSize != 0) hash ^= PartitionSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Duration);
      }
      if (PartitionSize != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PartitionSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
      }
      if (PartitionSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PartitionSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceProject other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.PartitionSize != 0) {
        PartitionSize = other.PartitionSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Duration = input.ReadUInt32();
            break;
          }
          case 24: {
            PartitionSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
